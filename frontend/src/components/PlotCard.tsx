// import React from 'react';
// import { Link, useNavigate } from 'react-router-dom';
// import API from '../api/axios';

// interface Plot {
//   id: number | string;
//   name: string;
//   soil: string;
//   area: number;
//   crops: string[];
// }

// interface Props {
//   plot: Plot;
// }

// const PlotCard: React.FC<Props> = ({ plot }) => {
//   const navigate = useNavigate();

//   const handleDelete = async () => {
//     if (!confirm('–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–æ–∫?')) return;

//     try {
//       const res = await API.get('/csrf-token');
//       const token = res.data.csrfToken;

//       await API.delete(`/plots/${plot.id}`, {
//         headers: {
//           'X-CSRF-Token': token,
//         },
//       });

//       window.location.reload(); // –∏–ª–∏ –æ–±–Ω–æ–≤–∏ —Å—Ç–µ–π—Ç
//     } catch (err) {
//       alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
//     }
//   };

//   return (
//     <div className="bg-white shadow p-6 rounded border border-gray-100">
//       <h3 className="text-lg font-semibold mb-1">{plot.name}</h3>
//       <p className="text-sm text-gray-600 mb-2">
//         –ü–æ—á–≤–∞: <strong>{plot.soil}</strong> ‚Ä¢ –ü–ª–æ—â–∞–¥—å: <strong>{plot.area} –º¬≤</strong>
//       </p>
//       <p className="text-sm text-gray-700 mb-3">–ö—É–ª—å—Ç—É—Ä—ã: {plot.crops.join(', ')}</p>
//       <div className="flex gap-3 flex-wrap">
//         <Link to="/analytics" className="text-sm bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700">
//           üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
//         </Link>
//         <Link to={`/plots/edit/${plot.id}`} className="text-sm border border-gray-400 px-3 py-1 rounded hover:bg-gray-100">
//           ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
//         </Link>
//         <Link to={`/plots/${plot.id}`} className="text-sm bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700">
//           üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ
//         </Link>
//         <button onClick={handleDelete} className="text-sm bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700">
//           üóë –£–¥–∞–ª–∏—Ç—å
//         </button>
//       </div>
//     </div>
//   );
// };

// export default PlotCard;

import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import API from '../api/axios';

interface Plot {
  id: number | string;
  name: string;
  soil: string; // —ç—Ç–æ —Ç–µ–ø–µ—Ä—å id —Ç–∏–ø–∞ –ø–æ—á–≤—ã
  area: number;
  crops: string[];
}

interface Props {
  plot: Plot;
}

const PlotCard: React.FC<Props> = ({ plot }) => {
  const [soilName, setSoilName] = useState<string>(''); // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –ø–æ—á–≤—ã

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ—á–≤—ã –ø–æ –µ–≥–æ ID
    const fetchSoilType = async () => {
      try {
        const res = await API.get(`/soil-types/${plot.soil}`);
        setSoilName(res.data.name); // –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ API –≤–µ—Ä–Ω—ë—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º name
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–ø–∞ –ø–æ—á–≤—ã:', err);
      }
    };

    if (plot.soil) {
      fetchSoilType();
    }
  }, [plot.soil]);

  const handleDelete = async () => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–æ–∫?')) return;

    try {
      const res = await API.get('/csrf-token');
      const token = res.data.csrfToken;

      await API.delete(`/plots/${plot.id}`, {
        headers: {
          'X-CSRF-Token': token,
        },
      });

      window.location.reload(); // –∏–ª–∏ –æ–±–Ω–æ–≤–∏ —Å—Ç–µ–π—Ç
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    }
  };

  return (
    <div className="bg-white shadow p-6 rounded border border-gray-100">
      <h3 className="text-lg font-semibold mb-1">{plot.name}</h3>
      <p className="text-sm text-gray-600 mb-2">
        –ü–æ—á–≤–∞: <strong>{soilName || plot.soil}</strong> ‚Ä¢ –ü–ª–æ—â–∞–¥—å: <strong>{plot.area} –º¬≤</strong>
      </p>
      <p className="text-sm text-gray-700 mb-3">–ö—É–ª—å—Ç—É—Ä—ã: {plot.crops.join(', ')}</p>
      <div className="flex gap-3 flex-wrap">
        <Link to="/analytics" className="text-sm bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700">
          üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        </Link>
        <Link to={`/plots/edit/${plot.id}`} className="text-sm border border-gray-400 px-3 py-1 rounded hover:bg-gray-100">
          ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        </Link>
        <Link to={`/plots/${plot.id}`} className="text-sm bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700">
          üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ
        </Link>
        <button onClick={handleDelete} className="text-sm bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700">
          üóë –£–¥–∞–ª–∏—Ç—å
        </button>
      </div>
    </div>
  );
};

export default PlotCard;
