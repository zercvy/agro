// import { Request, Response } from 'express';
// import  db  from '../src/models/db';
// import bcrypt from 'bcrypt';
// import jwt from 'jsonwebtoken';

// const COOKIE_NAME = process.env.COOKIE_NAME || 'admin_token';
// const JWT_SECRET = process.env.JWT_SECRET!;
// const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '1d';

// export const loginAdmin = async (req: Request, res: Response) => {
//   const { email, password } = req.body;

//   const [admins] = await db.query('SELECT * FROM admins WHERE email = ?', [email]);
//   const admin = (admins as any[])[0];
//   if (!admin) return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
//   console.log("Admin from DB:", admin); // ‚úÖ –≤–Ω—É—Ç—Ä—å —Ñ—É–Ω–∫—Ü–∏–∏
//   const valid = await bcrypt.compare(password, admin.password);
//   console.log("Match:", valid); // ‚úÖ –≤–Ω—É—Ç—Ä—å —Ñ—É–Ω–∫—Ü–∏–∏
//   if (!valid) return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });

//   const token = jwt.sign({ id: admin.id, email: admin.email, role: 'admin' }, JWT_SECRET, {
//     expiresIn: JWT_EXPIRES_IN
//   });

//   res.cookie(COOKIE_NAME, token, {
//     httpOnly: true,
//     sameSite: 'strict',
//     secure: false // true ‚Äî –≤ –ø—Ä–æ–¥–µ
//   }).json({ message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
// };

// export const getAdminProfile = async (req: Request, res: Response) => {
//   res.json(req.admin);
// };

// // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// export const getUserStats = async (req: Request, res: Response) => {
//   const [users] = await db.query('SELECT id, name, email, created_at FROM users');
//   res.json({
//     count: (users as any[]).length,
//     users,
//   });
// };

// // üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
// export const getAdminStats = async (_req: Request, res: Response) => {
//   try {
//     const [[{ userCount }]] = await db.query('SELECT COUNT(*) AS userCount FROM users');
//     const [[{ plotCount }]] = await db.query('SELECT COUNT(*) AS plotCount FROM plots');
//     const [[{ adminCount }]] = await db.query('SELECT COUNT(*) AS adminCount FROM admins');

//     res.json({
//       users: userCount,
//       plots: plotCount,
//       admins: adminCount
//     });
//   } catch (err) {
//     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
//     res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
//   }
// };

// // ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
// export const createAdmin = async (req: Request, res: Response) => {
//   const { email, password } = req.body;

//   try {
//     const [existingAdmins] = await db.query('SELECT id FROM admins WHERE email = ?', [email]);
//     if ((existingAdmins as any[]).length > 0) {
//       return res.status(400).json({ message: '–ê–¥–º–∏–Ω —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
//     }

//     const hashed = await bcrypt.hash(password, 10);
//     await db.query('INSERT INTO admins (email, password) VALUES (?, ?)', [email, hashed]);

//     res.json({ message: '–ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω' });
//   } catch (err) {
//     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:', err);
//     res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∞' });
//   }
// };


